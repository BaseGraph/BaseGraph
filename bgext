#!/usr/bin/env python3
import os
from argparse import ArgumentParser

import git


parser = ArgumentParser()
subparsers = parser.add_subparsers(dest="cmd")
subparsers.required = True

install_parser = subparsers.add_parser("install")
install_parser.add_argument("extensions", nargs="+", help="extensions to install")

update_parser = subparsers.add_parser("update")
update_parser.add_argument("extensions", nargs="+", help="extensions to update")

remove_parser = subparsers.add_parser("remove")
remove_parser.add_argument("extensions", nargs="+", help="extensions to remove")

list_parser = subparsers.add_parser("list")

args = parser.parse_args()


if __name__ == "__main__":
    # Move to root directory of project
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    install_path = os.path.join("include", "BaseGraph", "extensions")

    basegraph_repo = git.Repo(".")

    if args.cmd == "install":
        for submodule in basegraph_repo.submodules:
            extension_name = os.path.basename(submodule.path)
            if extension_name in args.extensions:
                if submodule.exists():
                    print(f"Extension \"{extension_name}\" is already installed."
                           "Use the \"update\" command to update it.")
                    continue
                submodule.update(init=True)

    elif args.cmd == "list":
        print("Installed extensions:")
        for submodule in basegraph_repo.submodules:
            extension_name = os.path.basename(submodule.path)
            if submodule.exists():
                commit = submodule.hexsha
                print(f"{extension_name:<17}commit {str(commit)[:8]}")

    elif args.cmd == "update":
        for submodule in basegraph_repo.submodules:
            extension_name = os.path.basename(submodule.path)
            if extension_name in args.extensions:
                if not submodule.exists():
                    print(f"Extension \"{extension_name}\" is not installed."
                           "Use the \"install\" command to install it.")
                    continue

                print(f"{extension_name:<17}commit {str(submodule.hexsha)[:8]}")

    elif args.cmd == "remove":
        for submodule in basegraph_repo.submodules:
            extension_name = os.path.basename(submodule.path)
            if extension_name in args.extensions and submodule.exists():
                submodule.remove()
                os.system(f"git reset {os.path.join(install_path, extension_name)}")
