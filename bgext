#!/usr/bin/env python3
from extension_utils import get_extension_info
import os
from argparse import ArgumentParser

import extension_utils as extutils


parser = ArgumentParser()
subparsers = parser.add_subparsers(dest="cmd")
subparsers.required = True

install_parser = subparsers.add_parser("install")
install_parser.add_argument("extensions", nargs="+", help="extensions to install")

update_parser = subparsers.add_parser("update")
update_parser.add_argument("extensions", nargs="+", help="extensions to update")

list_parser = subparsers.add_parser("list")

args = parser.parse_args()


if __name__ == "__main__":
    # Move to root directory of project
    os.chdir(os.path.dirname(os.path.abspath(__file__)))

    if not os.path.isdir(extutils.install_path):
        os.mkdir(extutils.install_path)


    if args.cmd == "install":
        for extension_name in args.extensions:
            if not extutils.is_valid_extension(extension_name):
                print(f"Extension \"{extension_name}\" is not supported.")
                continue
            extension = extutils.find_extension_info(extension_name)
            extutils.verify_requirements(extension)
            extutils.install_extension(extension)

    elif args.cmd == "list":
        print("Installed extensions:")
        for extension_name in os.listdir(extutils.install_path):
            # Extensions are directories
            extension_path = os.path.join(extutils.install_path, extension_name)
            if not os.path.isdir(extension_path):
                continue
            print(extutils.get_extension_info(extension_name))

    elif args.cmd == "update":
        for extension_name in args.extensions:
            if not extutils.is_valid_extension(extension_name):
                print(f"Extension \"{extension_name}\" is not supported.")
                continue

            pull_info = extutils.update_extension(extension_name)
            if pull_info is not None:
                print(f"Updated \"{extension_name}\" extension")
